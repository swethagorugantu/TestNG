<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="0" total="7" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="LoginTest" duration-ms="49" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
    <groups>
      <group name="Smoke">
        <method signature="Login.LoginAPI()[pri:0, instance:test.Login@6f7fd0e6]" name="LoginAPI" class="test.Login"/>
      </group> <!-- Smoke -->
    </groups>
    <test name="Login" duration-ms="44" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
      <class name="test.Login">
        <test-method status="PASS" signature="Order()[pri:0, instance:test.Login@6f7fd0e6]" name="Order" is-config="true" duration-ms="9" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Order -->
        <test-method status="PASS" signature="MobileLogin()[pri:0, instance:test.Login@6f7fd0e6]" name="MobileLogin" is-config="true" duration-ms="1" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLogin -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:test.Login@6f7fd0e6]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="WebLogin()[pri:0, instance:test.Login@6f7fd0e6]" name="WebLogin" duration-ms="8" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebLogin -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:test.Login@6f7fd0e6]" name="afterMethod" is-config="true" duration-ms="1" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="LoginAPI()[pri:0, instance:test.Login@6f7fd0e6]" name="LoginAPI" duration-ms="2" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginAPI -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:test.Login@6f7fd0e6]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:test.Login@6f7fd0e6]" name="afterMethod" is-config="true" duration-ms="0" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="APILogin()[pri:0, instance:test.Login@6f7fd0e6]" name="APILogin" duration-ms="3" started-at="2018-06-10T03:35:51Z" depends-on-methods="test.Login.WebLogin" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- APILogin -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:test.Login@6f7fd0e6]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:test.Login@6f7fd0e6]" name="afterMethod" is-config="true" duration-ms="0" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="MobileTest()[pri:0, instance:test.Login@6f7fd0e6]" name="MobileTest" is-config="true" duration-ms="0" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileTest -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:test.Login@6f7fd0e6]" name="afterSuite" is-config="true" duration-ms="0" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
        <test-method status="PASS" signature="afterSuite1()[pri:0, instance:test.Login@6f7fd0e6]" name="afterSuite1" is-config="true" duration-ms="1" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite1 -->
      </class> <!-- test.Login -->
    </test> <!-- Login -->
    <test name="Test" duration-ms="49" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
      <class name="test.Test1">
        <test-method status="PASS" signature="WebLogin(java.lang.String)[pri:0, instance:test.Test1@2a5ca609]" name="WebLogin" duration-ms="6" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[google.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebLogin -->
        <test-method status="FAIL" signature="dataTest(java.lang.String, java.lang.String)[pri:0, instance:test.Test1@2a5ca609]" name="dataTest" duration-ms="8" started-at="2018-06-10T03:35:51Z" data-provider="getData" finished-at="2018-06-10T03:35:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstpassword]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at test.Test1.dataTest(Test1.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataTest -->
        <test-method status="FAIL" signature="dataTest(java.lang.String, java.lang.String)[pri:0, instance:test.Test1@2a5ca609]" name="dataTest" duration-ms="1" started-at="2018-06-10T03:35:51Z" data-provider="getData" finished-at="2018-06-10T03:35:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[second password]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at test.Test1.dataTest(Test1.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataTest -->
        <test-method status="FAIL" signature="dataTest(java.lang.String, java.lang.String)[pri:0, instance:test.Test1@2a5ca609]" name="dataTest" duration-ms="1" started-at="2018-06-10T03:35:51Z" data-provider="getData" finished-at="2018-06-10T03:35:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[thirdusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdpassword]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at test.Test1.dataTest(Test1.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataTest -->
        <test-method status="PASS" signature="second()[pri:0, instance:test.Test1@2a5ca609]" name="second" is-config="true" duration-ms="1" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- second -->
        <test-method status="PASS" signature="assertFail()[pri:0, instance:test.Test1@2a5ca609]" name="assertFail" is-config="true" duration-ms="0" started-at="2018-06-10T03:35:51Z" finished-at="2018-06-10T03:35:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- assertFail -->
      </class> <!-- test.Test1 -->
    </test> <!-- Test -->
  </suite> <!-- LoginTest -->
</testng-results>
